"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationCommand = void 0;
const collection_data_1 = require("collection-data");
/**
 * Represent a Application Command
 * @class Application Command structure
 * @abstract
 */
class ApplicationCommand {
    /**
     * @constructor
     * @param {ShewenyClient} client - The client
     * @param {ApplicationCommandData} data - Application Command data
     */
    constructor(client, data, options) {
        this.client = client;
        this.data = data;
        this.description = options.description;
        this.category = options.category;
        this.only = options.only || "GUILD";
        this.cooldown = options.cooldown || 0;
        this.userPermissions = options.userPermissions || [];
        this.clientPermissions = options.clientPermissions || [];
        this.cooldowns = new collection_data_1.Collection();
    }
    /**
     * Unregister a application command
     * @public
     * @returns {boolean}
     */
    unregister() {
        this.client.commands.interaction?.delete(this.data.name);
        delete require.cache[require.resolve(this.path)];
        return true;
    }
    /**
     * Reload a Application Command
     * @public
     * @async
     * @returns {Promise<Collection<string, ApplicationCommand> | null>} The Application Commands collection
     */
    async reload() {
        if (this.path) {
            this.unregister();
            return this.register();
        }
        return null;
    }
    /**
     * Register a Application Command
     * @public
     * @async
     * @returns {Collection<string, ApplicationCommand>} The Application Commands collection
     */
    async register() {
        const ApplicationCommand = (await Promise.resolve().then(() => require(this.path))).default;
        const AC = new ApplicationCommand(this.client);
        return this.client.commands.interaction
            ? this.client.commands.interaction.set(AC.data.name, AC)
            : new collection_data_1.Collection().set(AC.data.name, AC);
    }
}
exports.ApplicationCommand = ApplicationCommand;
