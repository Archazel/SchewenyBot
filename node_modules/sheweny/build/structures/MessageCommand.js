"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCommand = void 0;
const collection_data_1 = require("collection-data");
/**
 * Represent a command
 * @class Command structure
 * @abstract
 */
class MessageCommand {
    /**
     * @constructor
     * @param {ShewenyClient} client - The client
     * @param {string} name - The name of the command
     * @param {ICommandMeta} options - The options of the command
     */
    constructor(client, name, options) {
        this.client = client;
        this.name = name;
        this.description = options.description;
        this.category = options.category;
        this.only = options.only || "GUILD";
        this.aliases = options.aliases || [];
        this.cooldown = options.cooldown || 0;
        this.userPermissions = options.userPermissions || [];
        this.clientPermissions = options.clientPermissions || [];
        this.cooldowns = new collection_data_1.Collection();
    }
    /**
     * Unregister a command
     * @public
     * @returns {boolean}
     */
    unregister() {
        this.client.commands.message?.delete(this.name);
        delete require.cache[require.resolve(this.path)];
        return true;
    }
    /**
     * Reload a command
     * @public
     * @async
     * @returns {Promise<Collection<string, MessageCommand> | null>} The commands collection
     */
    async reload() {
        if (this.path) {
            this.unregister();
            return this.register();
        }
        return null;
    }
    /**
     * Register a command
     * @public
     * @async
     * @returns {Collection<string, MessageCommand>} The commands collection
     */
    async register() {
        const Command = (await Promise.resolve().then(() => require(this.path))).default;
        const cmd = new Command(this.client);
        return this.client.commands.message
            ? this.client.commands.message.set(cmd.name, cmd)
            : new collection_data_1.Collection().set(cmd.name, cmd);
    }
}
exports.MessageCommand = MessageCommand;
