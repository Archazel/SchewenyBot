"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectMenusHandler = void 0;
const path_1 = require("path");
const collection_data_1 = require("collection-data");
const readDirFiles_1 = require("../util/readDirFiles");
const ShewenyClient_1 = require("../ShewenyClient");
/**
 * Loads select menus.
 * @class Select Menu Handler
 */
class SelectMenusHandler {
    /**
     * @constructor
     * @param {string} directory - The directory of the select menus
     * @param {ShewenyClient} [client] - The client
     */
    constructor(dir, client, loadAll) {
        if (!dir)
            throw new TypeError("Directory must be provided.");
        this.client = client;
        this.dir = dir;
        if (loadAll)
            this.loadAll();
        if (client && client instanceof ShewenyClient_1.ShewenyClient)
            client.handlers.selectMenus = this;
    }
    /**
     * Register all select menus in collection
     * @public
     * @async
     * @returns {Promise<Collection<string[], SelectMenu>>} The select menus collection
     */
    async loadAll() {
        const selectMenus = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.dir);
        const selectmenusPaths = await readDirFiles_1.readDirAndPush(baseDir);
        for (const selectmenuPath of selectmenusPaths) {
            let SM = await Promise.resolve().then(() => require(selectmenuPath));
            if (Object.keys(SM).length) {
                const key = Object.keys(SM)[0];
                SM = SM[key];
            }
            if (!SM)
                continue;
            const instance = new SM(this.client);
            if (!instance.customId)
                continue;
            instance.path = selectmenuPath;
            selectMenus.set(instance.customId, instance);
        }
        if (this.client instanceof ShewenyClient_1.ShewenyClient)
            this.client.selectMenus = selectMenus;
        return selectMenus;
    }
}
exports.SelectMenusHandler = SelectMenusHandler;
