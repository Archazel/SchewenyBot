"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonsHandler = void 0;
const path_1 = require("path");
const collection_data_1 = require("collection-data");
const readDirFiles_1 = require("../util/readDirFiles");
const ShewenyClient_1 = require("../ShewenyClient");
/**
 * Loads buttons.
 * @class Buttons Handler
 */
class ButtonsHandler {
    /**
     * @constructor
     * @param {string} directory - The directory of the buttons
     * @param {ShewenyClient} [client] - The client
     */
    constructor(dir, client, loadAll) {
        if (!dir)
            throw new TypeError("Directory must be provided.");
        this.client = client;
        this.dir = dir;
        if (loadAll)
            this.loadAll();
        if (client && client instanceof ShewenyClient_1.ShewenyClient)
            client.handlers.buttons = this;
    }
    /**
     * Register all buttons in collection
     * @public
     * @async
     * @returns {Promise<Collection<string[], Event>>} The buttons collection
     */
    async loadAll() {
        const buttons = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.dir);
        const buttonsPaths = await readDirFiles_1.readDirAndPush(baseDir);
        for (const buttonPath of buttonsPaths) {
            let Btn = await Promise.resolve().then(() => require(buttonPath));
            if (Object.keys(Btn).length) {
                const key = Object.keys(Btn)[0];
                Btn = Btn[key];
            }
            if (!Btn)
                continue;
            const instance = new Btn(this.client);
            if (!instance.customId)
                continue;
            instance.path = buttonPath;
            buttons.set(instance.customId, instance);
        }
        if (this.client instanceof ShewenyClient_1.ShewenyClient)
            this.client.buttons = buttons;
        return buttons;
    }
}
exports.ButtonsHandler = ButtonsHandler;
