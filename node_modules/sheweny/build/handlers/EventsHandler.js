"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsHandler = void 0;
const path_1 = require("path");
const collection_data_1 = require("collection-data");
const readDirFiles_1 = require("../util/readDirFiles");
const ShewenyClient_1 = require("../ShewenyClient");
/**
 * Loads events.
 * @class Event Handler
 */
class EventsHandler {
    /**
     * @constructor
     * @param {string} directory - The directory of the events
     * @param {ShewenyClient | Client} client - The client
     * @param {boolean} [loadAll] - Register all events in collection
     */
    constructor(dir, client, loadAll) {
        if (!dir)
            throw new TypeError("Directory must be provided.");
        if (!client)
            throw new TypeError("Client muste be provided.");
        this.client = client;
        this.dir = dir;
        if (loadAll)
            this.loadAll().then(() => this.registerAll());
        if (client && client instanceof ShewenyClient_1.ShewenyClient)
            client.handlers.events = this;
    }
    /**
     * Register all events in collection
     * @public
     * @async
     * @returns {Promise<Collection<string, Event>>} The events collection
     */
    async loadAll() {
        const events = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.dir);
        const evtsPaths = await readDirFiles_1.readDirAndPush(baseDir);
        for (const evtPath of evtsPaths) {
            let Evt = await Promise.resolve().then(() => require(evtPath));
            if (Object.keys(Evt).length) {
                const key = Object.keys(Evt)[0];
                Evt = Evt[key];
            }
            if (!Evt)
                continue;
            const instance = new Evt(this.client);
            if (!instance.name)
                continue;
            instance.path = evtPath;
            events.set(instance.name, instance);
        }
        if (this.client instanceof ShewenyClient_1.ShewenyClient)
            this.client.events = events;
        return events;
    }
    /**
     * Load all events and register them in collection if no events are registered
     * @public
     * @async
     * @param {Collection<string, Event>} [events] - The events to load.
     * @returns {Promise<void>}
     */
    async registerAll(events) {
        const evts = events || (this.client instanceof ShewenyClient_1.ShewenyClient ? this.client.events : undefined);
        if (!evts)
            throw new Error("No events found");
        const client = this.client instanceof ShewenyClient_1.ShewenyClient ? this.client : this.client;
        for (const [name, evt] of evts) {
            if (evt.once)
                client.once(name, (...args) => evt.execute(...args));
            else
                client.on(name, (...args) => evt.execute(...args));
        }
    }
}
exports.EventsHandler = EventsHandler;
