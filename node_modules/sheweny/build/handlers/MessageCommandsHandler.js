"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCommandsHandler = void 0;
const path_1 = require("path");
const collection_data_1 = require("collection-data");
const readDirFiles_1 = require("../util/readDirFiles");
const ShewenyClient_1 = require("../ShewenyClient");
const events_1 = require("events");
/**
 * Loads commands.
 * @class Commands Handler
 */
class MessageCommandsHandler extends events_1.EventEmitter {
    /**
     * @constructor
     * @param {IMessageCommandHandlerOptions} options - The options for the commands handler
     * @param {ShewenyClient} [client] - The client
     */
    constructor(options, client, loadAll) {
        super();
        if (!options.directory)
            throw new TypeError("Directory must be provided.");
        this.dir = options.directory;
        if (client)
            this.client = client;
        this.options = options;
        if (loadAll)
            this.loadAll();
        if (client && client instanceof ShewenyClient_1.ShewenyClient)
            client.handlers.messageCommands = this;
    }
    /**
     * Load all commands and register them to a collection.
     * @public
     * @async
     * @returns {Promise<Collection<string, MessageCommand>>} The collection of commands
     */
    async loadAll() {
        const commands = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.dir);
        const cmds = await readDirFiles_1.readDirAndPush(baseDir);
        for (const cmdPath of cmds) {
            let Cmd = await Promise.resolve().then(() => require(cmdPath));
            if (Object.keys(Cmd).length) {
                const key = Object.keys(Cmd)[0];
                Cmd = Cmd[key];
            }
            if (!Cmd)
                continue;
            const instance = new Cmd(this.client);
            if (!instance.name)
                continue;
            instance.path = cmdPath;
            commands.set(instance.name, instance);
        }
        if (this.client instanceof ShewenyClient_1.ShewenyClient)
            this.client.commands.message = commands;
        return commands;
    }
}
exports.MessageCommandsHandler = MessageCommandsHandler;
