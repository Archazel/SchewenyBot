"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InhibitorsHandler = void 0;
const path_1 = require("path");
const collection_data_1 = require("collection-data");
const readDirFiles_1 = require("../util/readDirFiles");
const ShewenyClient_1 = require("../ShewenyClient");
/**
 * Loads inhibitors.
 * @class
 */
class InhibitorsHandler {
    /**
     * @constructor
     * @param {string} dir - The directory of the inhibitors
     * @param {ShewenyClient} [client] - The client
     * @param {boolean} [loadAll] - Register all inhibitors in collection
     */
    constructor(dir, client, loadAll) {
        if (!dir)
            throw new TypeError("Directory must be provided.");
        this.client = client;
        this.dir = dir;
        if (loadAll)
            this.loadAll();
        if (client && client instanceof ShewenyClient_1.ShewenyClient)
            client.handlers.inhibitors = this;
    }
    /**
     * Register all inhibitors in collection
     * @public
     * @async
     * @returns {Promise<Collection<string, Inhibitor>>} The inhibitors collection
     */
    async loadAll() {
        const inhibitors = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.dir);
        const inhibitorsPaths = await readDirFiles_1.readDirAndPush(baseDir);
        for (const inhibitorPath of inhibitorsPaths) {
            let Inhib = await Promise.resolve().then(() => require(inhibitorPath));
            if (Object.keys(Inhib).length) {
                const key = Object.keys(Inhib)[0];
                Inhib = Inhib[key];
            }
            if (!Inhib)
                continue;
            const instance = new Inhib(this.client);
            if (!instance.name)
                continue;
            instance.path = inhibitorPath;
            inhibitors.set(instance.name, instance);
        }
        if (this.client instanceof ShewenyClient_1.ShewenyClient)
            this.client.inhibitors = inhibitors;
        return inhibitors;
    }
}
exports.InhibitorsHandler = InhibitorsHandler;
