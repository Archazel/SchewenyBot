"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InhibitorsManager = void 0;
const collection_data_1 = require("collection-data");
const path_1 = require("path");
const readDirFiles_1 = require("../utils/readDirFiles");
/**
 * Manager for Inhibitors
 */
class InhibitorsManager {
    /**
     * Constructor to manage inhibitors
     * @param {ShewenyClient} client Client framework
     * @param {string} directory Directory of the inhibitors folder
     * @param {boolean} [loadAll] If the inhibitors are loaded during bot launch
     */
    constructor(client, directory, loadAll) {
        if (!client)
            throw new TypeError("Client must be provided.");
        if (!directory)
            throw new TypeError("Directory must be provided.");
        this.client = client;
        this.directory = directory;
        if (loadAll)
            this.loadAll();
        client.handlers.inhibitors = this;
    }
    /**
     * Load all inhibitors in collection
     * @returns {Promise<Collection<string, Inhibitor>>}
     */
    async loadAll() {
        const inhibitors = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.directory);
        const inhibitorsPaths = await readDirFiles_1.readDirAndPush(baseDir);
        for (const inhibitorPath of inhibitorsPaths) {
            const inhibitorImport = await Promise.resolve().then(() => require(inhibitorPath));
            const key = Object.keys(inhibitorImport)[0];
            const Inhibitor = inhibitorImport[key];
            if (!Inhibitor)
                continue;
            const instance = new Inhibitor(this.client);
            if (!instance.name)
                continue;
            instance.path = inhibitorPath;
            inhibitors.set(instance.name, instance);
        }
        this.client.collections.inhibitors = inhibitors;
        this.inhibitors = inhibitors;
        return inhibitors;
    }
}
exports.InhibitorsManager = InhibitorsManager;
