"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonsManager = void 0;
const collection_data_1 = require("collection-data");
const path_1 = require("path");
const readDirFiles_1 = require("../utils/readDirFiles");
/**
 * Manager for Buttons
 */
class ButtonsManager {
    /**
     * Constructor to manage buttons
     * @param {ShewenyClient} client Client framework
     * @param {string} directory Directory of the buttons folder
     * @param {boolean} [loadAll] If the buttons are loaded during bot launch
     */
    constructor(client, directory, loadAll) {
        if (!client)
            throw new TypeError("Client must be provided.");
        if (!directory)
            throw new TypeError("Directory must be provided.");
        this.client = client;
        this.directory = directory;
        if (loadAll)
            this.loadAll();
        client.handlers.buttons = this;
    }
    /**
     * Load all buttons in collection
     * @returns {Promise<Collection<string[], Button>>}
     */
    async loadAll() {
        const buttons = new collection_data_1.Collection();
        const baseDir = path_1.join(require.main.path, this.directory);
        const buttonsPaths = await readDirFiles_1.readDirAndPush(baseDir);
        for (const buttonPath of buttonsPaths) {
            const buttonImport = await Promise.resolve().then(() => require(buttonPath));
            const key = Object.keys(buttonImport)[0];
            const Button = buttonImport[key];
            if (!Button)
                continue;
            const instance = new Button(this.client);
            if (!instance.customId)
                continue;
            instance.path = buttonPath;
            buttons.set(instance.customId, instance);
        }
        this.client.collections.buttons = buttons;
        this.buttons = buttons;
        return buttons;
    }
}
exports.ButtonsManager = ButtonsManager;
