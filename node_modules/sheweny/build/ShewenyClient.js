"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShewenyClient = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const discord_js_1 = require("discord.js");
const handlers_1 = require("./handlers");
/**
 * The main hub for interacting with the Discord API, and the starting point for any bot.
 * @class ShewenyClient
 * @extends Client Discord.js Client
 */
class ShewenyClient extends discord_js_1.Client {
    /**
     * @constructor Constructor of ShewenyClient
     * @param {IShewenyClientOptions} options - The options for the client
     */
    constructor(options, clientOptions) {
        super(clientOptions || options);
        this.handlers = {};
        this.commands = {};
        this.shewenyOptions = options;
        this.admins = options.admins;
        this.handlers.messageCommands = options.handlers?.messageCommands
            ? new handlers_1.MessageCommandsHandler(options.handlers.messageCommands, this, true)
            : undefined;
        this.handlers.events = options.handlers?.events
            ? new handlers_1.EventsHandler(options.handlers.events.directory, this, true)
            : undefined;
        this.handlers.buttons = options.handlers?.buttons
            ? new handlers_1.ButtonsHandler(options.handlers.buttons.directory, this, true)
            : undefined;
        this.handlers.selectMenus = options.handlers?.selectMenus
            ? new handlers_1.SelectMenusHandler(options.handlers.selectMenus.directory, this, true)
            : undefined;
        this.handlers.applicationCommands = options.handlers?.applicationCommands
            ? new handlers_1.ApplicationCommandsHandler(this, options.handlers.applicationCommands.directory, { loadAll: true, guildId: options.handlers.applicationCommands.guildId })
            : undefined;
        this.handlers.inhibitors = options.handlers?.inhibitors
            ? new handlers_1.InhibitorsHandler(options.handlers.inhibitors.directory, this, true)
            : undefined;
        this.init();
    }
    /**
     * Init ShewenyClient
     * @async
     * @private
     * @returns {Promise<void>}
     */
    async init() {
        const dir = path_1.join(__dirname, "./events");
        const files = await promises_1.readdir(dir);
        for (const file of files) {
            const event = await Promise.resolve().then(() => require(`${dir}/${file}`)).then((e) => e.default);
            const evtName = file.split(".")[0];
            this.on(evtName, (...args) => event(this, ...args));
        }
    }
    /**
     * Resolve when client is ready
     * @public
     * @returns {Promise<void>}
     */
    awaitReady() {
        return new Promise((resolve) => {
            if (this.isReady())
                return resolve();
            const that = this;
            that.once("ready", () => resolve());
        });
    }
}
exports.ShewenyClient = ShewenyClient;
